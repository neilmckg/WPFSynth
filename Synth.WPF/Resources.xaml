<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    mc:Ignorable="d"
                    xmlns:po="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"                     
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:c="clr-namespace:Synth.WPF.Controls"
                    xmlns:v="clr-namespace:Synth.WPF.Converters"
                    xmlns:m="clr-namespace:Synth.WPF.Modules"
                    xmlns:u="clr-namespace:Synth.WPF.Util"
                    xmlns:n="clr-namespace:Synth.NAudio;assembly=Synth.NAudio"
                    xmlns:i="clr-namespace:Synth.WPF.Instrument"
                    xmlns:synth="clr-namespace:Synth.WPF"
                    >

    <!--Colors & Brushes-->
    
    <Color x:Key="TrackColor">Blue</Color>
    <Color x:Key="ThumbColor">#305DFF00</Color> <!--48, 93, 255, 0-->
    <Color x:Key="ControlMeterColor">YellowGreen</Color>
    <Color x:Key="AudioMeterColor">#FFFF7F</Color>    <!--255, 255, 127-->

    <SolidColorBrush x:Key="ForegroundBrush" po:Freeze="True">White</SolidColorBrush>
    <SolidColorBrush x:Key="BackgroundBrush" po:Freeze="True">DarkRed</SolidColorBrush>

    <RadialGradientBrush x:Key="SynthWindowBrush" Center="0,0" RadiusX="1" RadiusY="1">
        <GradientStop Color="#FF2D2D5D" Offset="0"/>
        <GradientStop Color="Black" Offset="1"/>
    </RadialGradientBrush>

    <!--Building Blocks-->

    <sys:Double x:Key="StdInputColWidth">35</sys:Double>
    
    <Style x:Key="TextStyle" >
        <Setter Property="Control.FontFamily" Value="Calibri"/>
        <Setter Property="Control.FontSize" Value="11"/>
        <Setter Property="Control.Foreground" Value="{x:Static synth:Resources.ForegroundBrush}"/>
    </Style>

    <!--TODO: these are a problem because I don't want to embed this resource file in any other xaml file. These lines should be pasted into the top of XAML files that use them.-->
    <Style TargetType="TextBlock" BasedOn="{x:Static synth:Resources.DefaultTextStyle}"/>
    <Style TargetType="CheckBox" BasedOn="{x:Static synth:Resources.DefaultTextStyle}"/>
    <Style TargetType="ListBox" BasedOn="{x:Static synth:Resources.DefaultTextStyle}"/>
    <Style TargetType="ComboBox" BasedOn="{x:Static synth:Resources.DefaultTextStyle}"/>

    <ControlTemplate x:Key="ContentOnlyTemplate" TargetType="ContentControl">
        <ContentPresenter Cursor="Hand"/>
    </ControlTemplate>

    <ItemsPanelTemplate x:Key="WrapPanelTemplate">
        <WrapPanel Orientation="Horizontal"/>
    </ItemsPanelTemplate>

    <ControlTemplate x:Key="SliderThumbTemplate">
        <Border x:Name="mouseTarget"  Height="25" Width="25" CornerRadius="99" Background="Transparent" Cursor="Hand" Margin="-7">
            <Grid HorizontalAlignment="Center" VerticalAlignment="Center" IsHitTestVisible="False">
                <Ellipse x:Name="bead" Height="25" Width="25" Stroke="#90000000" StrokeThickness="1">
                    <Ellipse.Fill>
                        <RadialGradientBrush GradientOrigin="0.3,0.3" po:Freeze="True">
                            <GradientStop Color="{x:Static synth:Resources.PopoutColor}" Offset="1"/>
                            <GradientStop Color="White"/>
                        </RadialGradientBrush>
                    </Ellipse.Fill>
                </Ellipse>
                <Border Background="DarkSlateGray" Height="1" VerticalAlignment="Center" HorizontalAlignment="Center" Width="0" >
                    <Border.Style>
                        <Style TargetType="Border">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsMouseOver}" Value="True">
                                    <DataTrigger.EnterActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetProperty="Width" To="18" Duration="0:0:0.15"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </DataTrigger.EnterActions>
                                    <DataTrigger.ExitActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetProperty="Width" To="0" Duration="0:0:0.1"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </DataTrigger.ExitActions>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Border.Style>
                </Border>
            </Grid>
        </Border>
    </ControlTemplate>
    
    
    <!--Box Styles-->
    
    <Style x:Key="BoxStyle" TargetType="GroupBox">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Height" Value="200"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="GroupBox">
                    <Grid Margin="2,4">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="7"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*" MinWidth="7"/>
                        </Grid.ColumnDefinitions>

                        <Border Grid.Row="1" Grid.ColumnSpan="3" BorderThickness="1.5" CornerRadius="6"
                                Background="{TemplateBinding Background}" 
                                BorderBrush="{TemplateBinding Foreground}"/>
                        <Rectangle Grid.Row="1" Grid.Column="1"  Fill="{TemplateBinding Background}" Height="2" VerticalAlignment="Top"
                            Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Header, Converter={x:Static v:ValueToVisibilityConverter.CollapsedWhenEqual}, ConverterParameter='', TargetNullValue=Collapsed}"/>
                        <TextBlock Grid.Row="0" Grid.Column="1" Margin="2,0,2,-7" Text="{TemplateBinding Header}" FontSize="12" FontWeight="Bold" Foreground="{TemplateBinding Foreground}"/>
                        <Rectangle Grid.Row="1" Grid.ColumnSpan="3"  Height="19" Fill="{TemplateBinding Foreground}" Opacity="0.3" VerticalAlignment="Bottom" Margin="0,0,0,12"/>
                        <ContentPresenter Grid.Row="1" Grid.ColumnSpan="3" Margin="10,10,10,10"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="BoxShyStyle" TargetType="GroupBox" BasedOn="{StaticResource BoxStyle}">
        <Style.Triggers>
            <Trigger Property="u:AttachedProperties.IsVerbose" Value="False">
                <Setter Property="Template" Value="{x:Null}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ModuleBoxStyle" TargetType="GroupBox" BasedOn="{StaticResource BoxStyle}">
        <Setter Property="DataContext" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=m:Module}}"/>
        <Setter Property="Header" Value="{Binding Description}"/>
        <Setter Property="Background" Value="{x:Static synth:Resources.BackgroundBrush}"/>
        <Setter Property="Foreground" Value="{x:Static synth:Resources.ForegroundBrush}"/>
    </Style>

    <Style x:Key="ModuleBoxShyStyle" TargetType="GroupBox" BasedOn="{StaticResource ModuleBoxStyle}">
        <Style.Triggers>
            <Trigger Property="u:AttachedProperties.IsVerbose" Value="False">
                <Setter Property="Template" Value="{x:Null}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--Input Column Templates-->
    
    <ControlTemplate x:Key="InputColumnTemplate" TargetType="GroupBox">
        <Grid Margin="3,4">
            <Grid.RowDefinitions>
                <RowDefinition Height="*"/>
                <RowDefinition Height="12"/>
                <RowDefinition Height="16"/>
            </Grid.RowDefinitions>

            <ContentPresenter Grid.Row="0" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>

            <TextBlock Grid.Row="2" Style="{x:Static synth:Resources.DefaultTextStyle}" Text="{TemplateBinding Header}"
                       HorizontalAlignment="Center" VerticalAlignment="Center" RenderTransformOrigin="0.5, 0.5" Margin="-99">
                <TextBlock.RenderTransform>
                    <RotateTransform Angle="-30"/>
                </TextBlock.RenderTransform>
            </TextBlock>
        </Grid>        
    </ControlTemplate>
    
    <Style x:Key="InputColumnGroupBoxStyle" TargetType="GroupBox">
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="Template" Value="{x:Null}"/>
        <Setter Property="Width" Value="0"/>
        <Style.Triggers>
            <Trigger Property="u:AttachedProperties.IsVerbose" Value="True">
                <Setter Property="Template" Value="{x:Static synth:Resources.InputColumnTemplate}"/>
                <Setter Property="Width" Value="{x:Static synth:Resources.DefaultInputColumnWidth}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="True">
                <Setter Property="Template" Value="{x:Static synth:Resources.InputColumnTemplate}"/>
                <Setter Property="Width" Value="{x:Static synth:Resources.DefaultInputColumnWidth}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="MeterControlStyle" TargetType="c:MeterControl">
        <Setter Property="OverflowIndicator" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="c:MeterControl">
                    <Grid HorizontalAlignment="Center" Margin="4" Width="3" DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}">

                        <TextBlock Text="" Foreground="{x:Static synth:Resources.ForegroundBrush}" FontFamily="Segoe UI Symbol" FontSize="14" HorizontalAlignment="Center" VerticalAlignment="Top" Margin="-20,-17"
                                Visibility="{Binding IsEnabled, Converter={x:Static v:ValueToVisibilityConverter.CollapsedWhenEqual}, ConverterParameter=True}" Opacity="0.6"/>

                        <Grid x:Name="track">
                            <Grid.Effect>
                                <DropShadowEffect Color="{x:Static synth:Resources.TrackColor}" ShadowDepth="0" BlurRadius="9"/>
                            </Grid.Effect>
                            <Border CornerRadius="2" UseLayoutRounding="False" SnapsToDevicePixels="True">
                                <Border.Background>
                                    <SolidColorBrush Color="{x:Static synth:Resources.TrackColor}" po:Freeze="True"/>
                                </Border.Background>
                                <Border.Effect>
                                    <DropShadowEffect Color="{x:Static synth:Resources.TrackColor}" ShadowDepth="0" BlurRadius="4"/>
                                </Border.Effect>
                            </Border>
                        </Grid>

                        <Rectangle x:Name="neonHighlight"  Fill="White" HorizontalAlignment="Center" Width="1" Margin="1" UseLayoutRounding="False" SnapsToDevicePixels="True"/>

                        <Grid x:Name="Thermometer" 
                                Visibility="{Binding IsActive, Converter={x:Static v:ValueToVisibilityConverter.CollapsedWhenEqual}, ConverterParameter=False}">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <Rectangle Grid.Row="1" RenderTransformOrigin="0.5,1" Height="{Binding ElementName=Thermometer, Path=ActualHeight}">
                                <Rectangle.LayoutTransform>
                                    <ScaleTransform ScaleY="{Binding MeterPosition}"/>
                                </Rectangle.LayoutTransform>
                            </Rectangle>

                            <Border Grid.Row="1" CornerRadius="3"  RenderTransformOrigin="0.5,1" UseLayoutRounding="False" SnapsToDevicePixels="True" ClipToBounds="True" Margin="-0.5,0">
                                <Border.Background>
                                    <SolidColorBrush Color="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MeterColor}" po:Freeze="True"/>
                                </Border.Background>
                                <Border.Effect>
                                    <DropShadowEffect ShadowDepth="0" Color="{Binding MeterColor}" BlurRadius="7" Opacity="1"/>
                                </Border.Effect>
                            </Border>
                        </Grid>

                        <Grid x:Name="overflowLight">
                            <Grid.Effect>
                                <DropShadowEffect Color="Yellow" ShadowDepth="0" BlurRadius="10"/>
                            </Grid.Effect>
                            <Grid.Style>
                                <Style TargetType="Grid">
                                    <Setter Property="Visibility" Value="Visible"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding OverflowIndicator}" Value="False">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding IsOverflowed}" Value="False">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding IsActive}" Value="False">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Grid.Style>
                            <Border Background="Red" Height="8" VerticalAlignment="Top" CornerRadius="2">
                                <Rectangle Height="2" VerticalAlignment="Bottom" Fill="Red"/>
                                <Border.Effect>
                                    <DropShadowEffect Color="Yellow" ShadowDepth="0"/>
                                </Border.Effect>
                            </Border>
                        </Grid>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ControlSliderStyle" TargetType="c:MeteredSlider">
        <Setter Property="IsMeterWhenDisabled" Value="True"/>
        <Setter Property="ThumbTemplate" Value="{x:Static synth:Resources.SliderThumbTemplate}"/>
        <Setter Property="TrackTemplate">
            <Setter.Value>
                <ControlTemplate TargetType="Control">
                    <c:MeterControl Style="{x:Static synth:Resources.MeterControlStyle}"
                        MeterColor="{x:Static synth:Resources.ControlMeterColor}"
                        DataContext="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=c:MeteredSlider}}" 
                        Value="{Binding SliderPosition, Mode=OneWay}"
                        IsActive="{Binding IsEnabled, Converter={x:Static v:BooleanNegationConverter.Instance}}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--FrameworkElement Styles-->
    
    <Style x:Key="VerboseOnlyStyle" TargetType="Control">
        <Style.Triggers>
            <Trigger Property="u:AttachedProperties.IsVerbose" Value="False">
                <Setter Property="Template" Value="{x:Null}"/>
            </Trigger>
        </Style.Triggers>
    </Style>


    <!-- slider tick sets -->

    <x:Array x:Key="StandardLevelTicks" Type="c:SliderTick">
        <c:SliderTick Value="0" Label="Off"/>
        <c:SliderTick Value="0.1" Label=""/>
        <c:SliderTick Value="0.2" Label=""/>
        <c:SliderTick Value="0.3" Label=""/>
        <c:SliderTick Value="0.4" Label=""/>
        <c:SliderTick Value="0.5" Label=""/>
        <c:SliderTick Value="0.6" Label=""/>
        <c:SliderTick Value="0.7" Label=""/>
        <c:SliderTick Value="0.8" Label=""/>
        <c:SliderTick Value="0.9" Label=""/>
        <c:SliderTick Value="1" Label="Max"/>
    </x:Array>
    
    <x:Array x:Key="PitchRangeTicks" Type="c:SliderTick">
        <c:SliderTick Value="0" Label="C0"/>
        <c:SliderTick Value="0.1" Label="C1"/>
        <c:SliderTick Value="0.2" Label="C2"/>
        <c:SliderTick Value="0.3" Label="C3"/>
        <c:SliderTick Value="0.4" Label="C4"/>
        <c:SliderTick Value="0.5" Label="C5"/>
        <c:SliderTick Value="0.6" Label="C6"/>
        <c:SliderTick Value="0.7" Label="C7"/>
        <c:SliderTick Value="0.8" Label="C8"/>
        <c:SliderTick Value="0.9" Label="C9"/>
        <c:SliderTick Value="1" Label="C10"/>
    </x:Array>

    <Style x:Key="TriggerIndicatorStyle" TargetType="Ellipse">
        <Setter Property="Height" Value="9"/>
        <Setter Property="Width" Value="9"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="Margin" Value="-13,-14"/>
        <Setter Property="StrokeThickness" Value="1"/>
        <Setter Property="Stroke" Value="{x:Static synth:Resources.ForegroundBrush}"/>
        <Setter Property="Fill" Value="{x:Static synth:Resources.BackgroundBrush}"/>
        <Setter Property="IsEnabled" Value="False"/>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="True">
                <Setter Property="Fill" Value="{x:Static synth:Resources.ForegroundBrush}"/>
                <Setter Property="Effect">
                    <Setter.Value>
                        <DropShadowEffect ShadowDepth="0" Color="Yellow" BlurRadius="12"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <ControlTemplate x:Key="SimpleComboBoxTemplate" TargetType="ComboBox">
        <Grid Margin="{TemplateBinding Padding}">
            <ToggleButton Name="ToggleButton" Foreground="{TemplateBinding Foreground}" Focusable="false" ClickMode="Press"
                          IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}" 
                          HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Background="{TemplateBinding Background}">
                <ToggleButton.Template>
                    <ControlTemplate TargetType="ToggleButton">
                        <Grid Background="{TemplateBinding Background}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <ContentPresenter Grid.Column="0" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                            <Path Grid.Column="1" x:Name="Arrow" Margin="0,2,0,0" VerticalAlignment="Center"
                                Visibility="{Binding ElementName=ToggleButton, Path=IsEnabled, Converter={x:Static v:ValueToVisibilityConverter.CollapsedWhenNotEqual}, ConverterParameter=True}"
                                Fill="{x:Static synth:Resources.ForegroundBrush}" Data="M 0 0 L 4 4 L 8 0 Z"/>
                        </Grid>
                    </ControlTemplate>
                </ToggleButton.Template>
                <ContentPresenter Name="ContentSite" IsHitTestVisible="False" VerticalAlignment="Center"
                                        Content="{TemplateBinding SelectionBoxItem}"
                                        ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                        ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"/>
            </ToggleButton>

            <Popup Name="Popup" Placement="Bottom" AllowsTransparency="True" Focusable="False" PopupAnimation="Slide" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                        IsOpen="{TemplateBinding IsDropDownOpen}" HorizontalOffset="-7">
                <Border x:Name="DropDownBorder" CornerRadius="4"
                                                Background="#CB000000" BorderThickness="1" BorderBrush="#888"
                                                MinWidth="{TemplateBinding ActualWidth}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                    <ScrollViewer SnapsToDevicePixels="True" Foreground="{TemplateBinding Foreground}" FontWeight="Normal">
                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained"/>
                    </ScrollViewer>
                </Border>
            </Popup>
        </Grid>
    </ControlTemplate>

    <Style x:Key="MouseOverWhiteGlow">
        <Style.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
                <Setter Property="UIElement.Effect">
                    <Setter.Value>
                        <DropShadowEffect Color="White" ShadowDepth="0"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <ControlTemplate x:Key="WhiteBorderToggleTemplate" TargetType="ToggleButton">
        <Border BorderThickness="1" CornerRadius="6" Padding="6,1">
            <Border.Style>
                <Style TargetType="Border">
                    <Setter Property="BorderBrush" Value="{x:Null}"/>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsChecked}" Value="True">
                            <Setter Property="BorderBrush" Value="{x:Static synth:Resources.ForegroundBrush}"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Border.Style>
            <ContentControl Content="{TemplateBinding Content}" Cursor="Hand"/>
        </Border>
    </ControlTemplate>
    
    <ControlTemplate x:Key="MonoSimpleInstrumentInputTemplate" TargetType="Control">
        <GroupBox Style="{x:Static synth:Resources.BoxShyStyle}" Header="Input"
                  Foreground="{x:Static synth:Resources.ForegroundBrush}" 
                  Background="{x:Static synth:Resources.BackgroundBrush}">
            <Grid>
                <Ellipse Style="{x:Static synth:Resources.TriggerIndicatorStyle}" IsEnabled="{Binding Intensity, Converter={x:Static v:ValueToTriggerConverter.TriggerWhenNotEqual}, ConverterParameter=0}"/>

                <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                    <GroupBox Template="{x:Static synth:Resources.InputColumnTemplate}" Header="Channel">
                        <ListBox Background="Transparent" BorderBrush="#33FFFFFF"
                                ItemsSource="{x:Static n:MidiLink.Channels}" SelectedItem="{Binding MidiChannel}" BorderThickness="0" VerticalAlignment="Center"/>
                    </GroupBox>

                    <GroupBox Width="65" Header="Bend Range" Template="{x:Static synth:Resources.InputColumnTemplate}" VerticalContentAlignment="Stretch">
                        <c:MeteredSlider Style="{x:Static synth:Resources.ControlSliderStyle}"
                                                    Value="{Binding Path=PitchBendRange}" Margin="-15,0,10,0"
                                                    Minimum="{x:Static i:MonoSimpleInstrument.MinimumBendRange}" Maximum="{x:Static i:MonoSimpleInstrument.MaximumBendRange}"
                                                    IsEnabled="{Binding Converter={x:Static v:IsPropertyBoundToBooleanConverter.FalseIfBound}, ConverterParameter={x:Static i:MonoSimpleInstrument.PitchBendRangeProperty}}">
                            <c:SliderTick Value="3" Label="Minor 3rd"/>
                            <c:SliderTick Value="2" Label="Whole step"/>
                            <c:SliderTick Value="1" Label="Half step"/>
                            <c:SliderTick Value="0" Label="Off"/>
                        </c:MeteredSlider>
                    </GroupBox>

                    <GroupBox Header="" Style="{x:Static synth:Resources.InputColumnGroupBoxStyle}">
                        <Button Grid.Row="0" VerticalAlignment="Center"  Command="{Binding PanicCommand}" Cursor="Hand" ToolTip="All Notes Off">
                            <Button.Template>
                                <ControlTemplate TargetType="Button">
                                    <Grid>
                                        <Ellipse Width="24" Height="24" Fill="Red" Stroke="{x:Static synth:Resources.ForegroundBrush}" StrokeThickness="1"/>
                                        <TextBlock Text="!" FontFamily="Times New Roman" FontSize="20" FontWeight="Bold" Foreground="{x:Static synth:Resources.ForegroundBrush}"  Margin="-10" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                    </Grid>
                                </ControlTemplate>
                            </Button.Template>
                        </Button>
                    </GroupBox>
                </StackPanel>
            </Grid>
        </GroupBox>
    </ControlTemplate>

    <ControlTemplate x:Key="MonoSimpleInstrumentOutputTemplate" TargetType="Control">
        <GroupBox Style="{x:Static synth:Resources.BoxShyStyle}" Header="Output"
                  Foreground="{x:Static synth:Resources.ForegroundBrush}" 
                  Background="{x:Static synth:Resources.BackgroundBrush}" >
            <Grid>
                <Ellipse Style="{x:Static synth:Resources.TriggerIndicatorStyle}" IsEnabled="{Binding PreLevel, Converter={x:Static v:ValueToTriggerConverter.TriggerWhenNotEqual}, ConverterParameter=0, FallbackValue=False}"/>
                <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                    <GroupBox Header="Level" Width="{x:Static synth:Resources.DefaultInputColumnWidth}" 
                              Template="{x:Static synth:Resources.InputColumnTemplate}" VerticalContentAlignment="Stretch"
                                              IsEnabled="{Binding Converter={x:Static v:IsPropertyBoundToBooleanConverter.FalseIfBound}, ConverterParameter={x:Static i:MonoSimpleInstrument.LevelProperty}}">
                        <c:MeteredSlider Style="{x:Static synth:Resources.ControlSliderStyle}"
                                                Minimum="0" Maximum="1"
                                                Value="{Binding Level}" ScaleFactor="2" TicksSource="{x:Static synth:Resources.StandardLevelTicks}"/>
                    </GroupBox>
                </StackPanel>
            </Grid>
        </GroupBox>
    </ControlTemplate>

    <ControlTemplate x:Key="InstrumentTemplate" TargetType="i:InstrumentBase">
        <Grid>
            <Control x:Name="InstrumentContextSource" Visibility="Collapsed"/>
            <ItemsControl ItemsPanel="{TemplateBinding ItemsPanel}">
                <ItemsControl.ItemsSource>
                    <CompositeCollection>
                        <Control DataContext="{TemplateBinding DataContext}" Template="{TemplateBinding InputTemplate}"/>
                        <!--This weird binding trick is necessary because Items is not a dependency property, and the collection container is not in the logical tree.-->
                        <CollectionContainer Collection="{Binding DataContext.Items, Source={x:Reference InstrumentContextSource}}"/>
                        <Control DataContext="{TemplateBinding DataContext}" Template="{TemplateBinding OutputTemplate}"/>
                    </CompositeCollection>
                </ItemsControl.ItemsSource>
            </ItemsControl>
        </Grid>
    </ControlTemplate>

</ResourceDictionary>
